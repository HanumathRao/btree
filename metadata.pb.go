// Code generated by protoc-gen-go.
// source: metadata.proto
// DO NOT EDIT!

package btree

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type BtreeMetaData struct {
	Root             *int64 `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	LeafCount        *int64 `protobuf:"varint,2,opt,name=leaf_count" json:"leaf_count,omitempty"`
	NodeCount        *int64 `protobuf:"varint,3,opt,name=node_count" json:"node_count,omitempty"`
	LeafMax          *int64 `protobuf:"varint,4,opt,name=leaf_max" json:"leaf_max,omitempty"`
	NodeMax          *int64 `protobuf:"varint,5,opt,name=node_max" json:"node_max,omitempty"`
	Size             *int64 `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
	IndexCursor      *int64 `protobuf:"varint,7,opt,name=index_cursor" json:"index_cursor,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BtreeMetaData) Reset()         { *m = BtreeMetaData{} }
func (m *BtreeMetaData) String() string { return proto.CompactTextString(m) }
func (*BtreeMetaData) ProtoMessage()    {}

func (m *BtreeMetaData) GetRoot() int64 {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return 0
}

func (m *BtreeMetaData) GetLeafCount() int64 {
	if m != nil && m.LeafCount != nil {
		return *m.LeafCount
	}
	return 0
}

func (m *BtreeMetaData) GetNodeCount() int64 {
	if m != nil && m.NodeCount != nil {
		return *m.NodeCount
	}
	return 0
}

func (m *BtreeMetaData) GetLeafMax() int64 {
	if m != nil && m.LeafMax != nil {
		return *m.LeafMax
	}
	return 0
}

func (m *BtreeMetaData) GetNodeMax() int64 {
	if m != nil && m.NodeMax != nil {
		return *m.NodeMax
	}
	return 0
}

func (m *BtreeMetaData) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *BtreeMetaData) GetIndexCursor() int64 {
	if m != nil && m.IndexCursor != nil {
		return *m.IndexCursor
	}
	return 0
}

type NodeRecordMetaData struct {
	Id               *int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Childrens        []int64  `protobuf:"varint,2,rep,name=childrens" json:"childrens,omitempty"`
	Keys             [][]byte `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
	IsDirt           *int32   `protobuf:"varint,4,opt,name=is_dirt" json:"is_dirt,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *NodeRecordMetaData) Reset()         { *m = NodeRecordMetaData{} }
func (m *NodeRecordMetaData) String() string { return proto.CompactTextString(m) }
func (*NodeRecordMetaData) ProtoMessage()    {}

func (m *NodeRecordMetaData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NodeRecordMetaData) GetChildrens() []int64 {
	if m != nil {
		return m.Childrens
	}
	return nil
}

func (m *NodeRecordMetaData) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *NodeRecordMetaData) GetIsDirt() int32 {
	if m != nil && m.IsDirt != nil {
		return *m.IsDirt
	}
	return 0
}

type LeafRecordMetaData struct {
	Id               *int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Keys             [][]byte `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	Values           [][]byte `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
	IsDirt           *int32   `protobuf:"varint,4,opt,name=is_dirt" json:"is_dirt,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LeafRecordMetaData) Reset()         { *m = LeafRecordMetaData{} }
func (m *LeafRecordMetaData) String() string { return proto.CompactTextString(m) }
func (*LeafRecordMetaData) ProtoMessage()    {}

func (m *LeafRecordMetaData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeafRecordMetaData) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *LeafRecordMetaData) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LeafRecordMetaData) GetIsDirt() int32 {
	if m != nil && m.IsDirt != nil {
		return *m.IsDirt
	}
	return 0
}

func init() {
}
